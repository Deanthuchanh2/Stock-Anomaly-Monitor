import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import datetime
from azureml.core import Workspace, Dataset
from azureml.core.authentication import InteractiveLoginAuthentication
from io import BytesIO
import xlsxwriter
from fpdf import FPDF
import os

# === Setup Azure ML Workspace ===
auth = InteractiveLoginAuthentication()
ws = Workspace(
    subscription_id="9b250c08-bb98-4839-80d0-a29aa5980162",
    resource_group="ML",
    workspace_name="ML_HOANG",
    auth=auth
)
datastore = ws.get_default_datastore()
dataset = Dataset.File.from_files(path=(datastore, 'UI/DF/dunusual_stock.csv'))
csv_path = dataset.download()[0]

# === Load data ===
try:
    df = pd.read_csv(csv_path, encoding='utf-8-sig')
except UnicodeDecodeError:
    df = pd.read_csv(csv_path, encoding='latin1')
df['Ng√†y'] = pd.to_datetime(df['Ng√†y']).dt.tz_localize(None)

# === Streamlit App ===
st.set_page_config(layout="wide")
st.markdown("<h1 style='text-align: center;'> Dashboard Gi√°m s√°t Giao d·ªãch B·∫•t Th∆∞·ªùng</h1>", unsafe_allow_html=True)

min_date = df['Ng√†y'].min().date()
max_date = df['Ng√†y'].max().date()
start_date, end_date = st.date_input("\U0001F4C5 Ch·ªçn kho·∫£ng th·ªùi gian giao d·ªãch:", (min_date, max_date), min_value=min_date, max_value=max_date)
mask = (df['Ng√†y'].dt.date >= start_date) & (df['Ng√†y'].dt.date <= end_date)
df_filtered = df[mask]
df_bat_thuong = df_filtered[df_filtered['Nh·∫≠n di·ªán b·∫•t th∆∞·ªùng'].astype(str).str.strip().str.lower() == "b·∫•t th∆∞·ªùng"]

st.subheader("\U0001F6A8 Danh s√°ch c·ªï phi·∫øu c√≥ d·∫•u hi·ªáu b·∫•t th∆∞·ªùng")
if df_bat_thuong.empty:
    st.success("‚úÖ Kh√¥ng ph√°t hi·ªán giao d·ªãch b·∫•t th∆∞·ªùng trong kho·∫£ng th·ªùi gian.")
else:
    st.dataframe(df_bat_thuong[[ 
        'Ng√†y', 'M√£ c·ªï phi·∫øu', 'Gi√° ƒë√≥ng c·ª≠a', 'Kh·ªëi l∆∞·ª£ng giao d·ªãch', 
        'C·∫£nh b√°o bi·∫øn ƒë·ªông gi√°', 'C·∫£nh b√°o d√≤ng ti·ªÅn kh·ªëi ngo·∫°i', 
        'C·∫£nh b√°o thanh kho·∫£n', 'C·∫£nh b√°o Bollinger', 'C·∫£nh b√°o RSI', 
        'C·∫£nh b√°o MACD']], use_container_width=True)

    st.subheader("\U0001F50D Ph√¢n t√≠ch chi ti·∫øt c·ªï phi·∫øu")
    stock_list = df_bat_thuong['M√£ c·ªï phi·∫øu'].unique()
    selected_stock = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", stock_list)

    df_stock = df[df['M√£ c·ªï phi·∫øu'] == selected_stock].sort_values('Ng√†y')

    def calculate_bollinger_bands(data, window=20, std_dev=2):
        data = data.copy()
        data['Middle Band'] = data['Gi√° ƒë√≥ng c·ª≠a'].rolling(window=window).mean()
        rolling_std = data['Gi√° ƒë√≥ng c·ª≠a'].rolling(window=window).std()
        data['Upper Band'] = data['Middle Band'] + std_dev * rolling_std
        data['Lower Band'] = data['Middle Band'] - std_dev * rolling_std
        return data

    df_stock = calculate_bollinger_bands(df_stock)

    st.markdown("### \U0001F4CA Bi·ªÉu ƒë·ªì ph√¢n t√≠ch k·ªπ thu·∫≠t")

    fig_boll = go.Figure()
    fig_boll.add_trace(go.Scatter(x=df_stock['Ng√†y'], y=df_stock['Gi√° ƒë√≥ng c·ª≠a'], name='Gi√° ƒë√≥ng c·ª≠a'))
    fig_boll.add_trace(go.Scatter(x=df_stock['Ng√†y'], y=df_stock['Upper Band'], name='Upper Band', line=dict(color='red', dash='dot')))
    fig_boll.add_trace(go.Scatter(x=df_stock['Ng√†y'], y=df_stock['Middle Band'], name='Middle Band', line=dict(color='gray')))
    fig_boll.add_trace(go.Scatter(x=df_stock['Ng√†y'], y=df_stock['Lower Band'], name='Lower Band', line=dict(color='blue', dash='dot')))
    fig_boll.update_layout(title=f"Bollinger Bands - {selected_stock}", xaxis_title="Ng√†y", yaxis_title="Gi√°", height=400)
    st.plotly_chart(fig_boll, use_container_width=True)

    fig_rsi = go.Figure()
    fig_rsi.add_trace(go.Scatter(x=df_stock['Ng√†y'], y=df_stock['RSI'], name='RSI', line=dict(color='orange')))
    fig_rsi.add_trace(go.Scatter(x=df_stock['Ng√†y'], y=[70]*len(df_stock), name='Overbought (70)', line=dict(color='red', dash='dash')))
    fig_rsi.add_trace(go.Scatter(x=df_stock['Ng√†y'], y=[30]*len(df_stock), name='Oversold (30)', line=dict(color='green', dash='dash')))
    fig_rsi.update_layout(title="RSI", xaxis_title="Ng√†y", yaxis_title="RSI", height=300)
    st.plotly_chart(fig_rsi, use_container_width=True)

    st.plotly_chart(px.line(df_stock, x='Ng√†y', y='Gi√° ƒë√≥ng c·ª≠a', title=f'üìâ Gi√° ƒë√≥ng c·ª≠a - {selected_stock}'), use_container_width=True)
    st.plotly_chart(px.line(df_stock, x='Ng√†y', y='Kh·ªëi l∆∞·ª£ng giao d·ªãch', title='üìä Kh·ªëi l∆∞·ª£ng giao d·ªãch'), use_container_width=True)
    st.plotly_chart(px.line(df_stock, x='Ng√†y', y=['MACD', 'Signal_Line'], title='üìâ MACD & Signal Line'), use_container_width=True)

    st.subheader("‚ö†Ô∏è C·∫£nh b√°o g·∫ßn nh·∫•t")
    df_stock['Ng√†y_date'] = df_stock['Ng√†y'].dt.date
    df_stock['Nh·∫≠n di·ªán b·∫•t th∆∞·ªùng'] = df_stock['Nh·∫≠n di·ªán b·∫•t th∆∞·ªùng'].fillna('').astype(str)
    df_stock_bat_thuong = df_stock[(df_stock['Nh·∫≠n di·ªán b·∫•t th∆∞·ªùng'].str.strip().str.lower() == 'b·∫•t th∆∞·ªùng') & (df_stock['Ng√†y_date'] <= end_date)]
    if not df_stock_bat_thuong.empty:
        last_row = df_stock_bat_thuong.sort_values('Ng√†y', ascending=False).iloc[0]
        with st.expander("Chi ti·∫øt c·∫£nh b√°o"):
            st.markdown(f"- **Ng√†y**: {last_row['Ng√†y'].date()}")
            for col in ['C·∫£nh b√°o bi·∫øn ƒë·ªông gi√°', 'C·∫£nh b√°o thanh kho·∫£n', 'C·∫£nh b√°o d√≤ng ti·ªÅn kh·ªëi ngo·∫°i', 'C·∫£nh b√°o Bollinger', 'C·∫£nh b√°o RSI', 'C·∫£nh b√°o MACD', 'C·∫£nh b√°o ATR']:
                st.markdown(f"- **{col}**: {last_row.get(col, 'Kh√¥ng c√≥')}")
            st.markdown(f"- **Anomaly Score**: {last_row.get('Anomaly_Score', 0):.3f}")
    else:
        st.info("‚úÖ Kh√¥ng c√≥ giao d·ªãch b·∫•t th∆∞·ªùng n√†o g·∫ßn v·ªõi ng√†y ƒë√£ ch·ªçn.")

    # === Export Data ===
    st.subheader("\U0001F4E5 T·∫£i D·ªØ Li·ªáu")
    time_frame = st.radio("Ch·ªçn kho·∫£ng th·ªùi gian", ("Ng√†y", "Tu·∫ßn", "To√†n b·ªô"))
    df_export = df_bat_thuong if time_frame == "Ng√†y" else df_bat_thuong.resample('W-Mon', on='Ng√†y').last() if time_frame == "Tu·∫ßn" else df_bat_thuong
    export_type = st.selectbox("Ch·ªçn ƒë·ªãnh d·∫°ng xu·∫•t", ["Excel", "PDF"])

    if export_type == "Excel":
        def to_excel(df):
            for col in df.columns:
                if pd.api.types.is_datetime64_any_dtype(df[col]):
                    df[col] = pd.to_datetime(df[col]).dt.tz_localize(None)
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='Abnormal Stocks')
                writer.book.close()
            return output.getvalue()

        excel_data = to_excel(df_export)
        st.download_button(label="T·∫£i file Excel", data=excel_data, file_name="abnormal_stocks.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    elif export_type == "PDF":
        def to_pdf(df):
            pdf = FPDF()
            pdf.add_page()
            font_path = "DejaVuSans.ttf"
            if not os.path.exists(font_path):
                st.error("Kh√¥ng t√¨m th·∫•y file font 'DejaVuSans.ttf'. Vui l√≤ng t·∫£i v·ªÅ v√† ƒë·∫∑t c√πng th∆∞ m·ª•c v·ªõi script.")
                return None
            pdf.add_font("DejaVu", "", font_path, uni=True)
            pdf.set_font("DejaVu", size=12)
            pdf.cell(0, 10, txt="Danh s√°ch c·ªï phi·∫øu b·∫•t th∆∞·ªùng", ln=True, align='C')
            pdf.ln(10)

            col_names = df.columns.tolist()
            for col in col_names:
                pdf.cell(40, 10, str(col), 1, 0, 'C')
            pdf.ln()

            for row in df.itertuples(index=False):
                for value in row:
                    pdf.cell(40, 10, str(value), 1, 0, 'C')
                pdf.ln()

            pdf_output = BytesIO()
            pdf.output(pdf_output)
            return pdf_output.getvalue()

        pdf_data = to_pdf(df_export)
        if pdf_data:
            st.download_button(label="T·∫£i file PDF", data=pdf_data, file_name="abnormal_stocks.pdf", mime="application/pdf")
